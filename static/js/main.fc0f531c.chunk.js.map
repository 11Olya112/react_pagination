{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","currentPage","onPageChange","totalStart","totalEnd","totalResult","slice","existingPages","Math","ceil","isFirstPage","isLastPage","length","className","classnames","disabled","href","onClick","map","page","active","all","items","from","to","numbers","n","push","getNumbers","App","itemsPerPage","useState","setCurrentPage","value","setValue","useEffect","id","onChange","event","target","it","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"kNAUaA,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaH,EAAUC,EAAcD,EACrCI,EAAWJ,EAAUC,EAErBI,EAAcN,EAAMO,MAAMH,EAAYC,GAEtCG,EAAgBR,EAAMO,MAAM,EAAGE,KAAKC,KAAK,GAAKT,IAE9CU,EAA8B,IAAhBT,EACdU,EAAaV,IAAgBM,EAAcK,OAEjD,OACE,qCACE,qBAAIC,UAAU,aAAd,UACE,oBACEA,UAAWC,IAAW,YAAa,CACjCC,SAAUL,IAFd,SAKE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeN,EACfO,QAAS,kBAAMf,EAAaD,EAAc,IAL5C,oBAUDM,EAAcW,KAAI,SAACC,GAAD,OACjB,oBAEEN,UAAWC,IAAW,YAAa,CACjCM,OAAQnB,IAAgBkB,IAE1BF,QAAS,WACPf,EAAaiB,IAEf,cAAY,OARd,SAUE,mBAAG,UAAQ,WAAWN,UAAU,YAAYG,KAAI,WAAMG,GAAtD,SACGA,KAVEA,MAcT,oBACEN,UAAWC,IAAW,YAAa,CACjCC,SAAUJ,IAFd,SAKE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAAS,kBAAMf,EAAaD,EAAc,IAL5C,uBAWJ,6BACGI,EAAYa,KAAI,SAACG,GAAD,OACf,oBAAI,UAAQ,OAAZ,wBACWA,IADaA,YCzElC,IAAMC,ECLC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDFKG,CAAW,EAAG,IAAIV,KAAI,SAACQ,GAAD,OAAOA,KAE9BG,EAAgB,WAC3B,IAAMC,EAAe,CAAC,EAAG,EAAG,GAAI,IAEhC,EAAsCC,mBAAST,EAAM,IAArD,mBAAOrB,EAAP,KAAoB+B,EAApB,KACA,EAA0BD,mBAAiBD,EAAa,IAAxD,mBAAOG,EAAP,KAAcC,EAAd,KAEM/B,EAAa8B,EAAQhC,EAAcgC,EACnC7B,EAAW6B,EAAQhC,EAEnBI,EAAciB,EAAMhB,MAAMH,EAAYC,GAI5C,OAFA+B,qBAAU,kBAAMH,EAAeV,EAAM,MAAK,CAACW,IAGzC,sBAAKpB,UAAU,YAAf,UACE,uDAEA,oBAAGA,UAAU,OAAO,UAAQ,OAA5B,iBAEG,IACAZ,EAHH,kBAIcI,EAAY,GAJ1B,cAKIA,EAAYA,EAAYO,OAAS,GALrC,eAMSU,EAAMV,OANf,QASA,sBAAKC,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRoB,MAAOA,EACPG,GAAG,kBACHvB,UAAU,eACVwB,SAAU,SAACC,GACTJ,GAAUI,EAAMC,OAAON,QAN3B,SASGH,EAAaZ,KAAI,SAACsB,GAAD,OAChB,wBAAQP,MAAOO,EAAf,SACGA,GADqBA,UAO9B,uBAAOC,QAAQ,kBAAkB5B,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEd,MAAOuB,EACPtB,QAASiC,EACThC,YAAaA,EACbC,aAAc8B,QE1DtBU,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fc0f531c.chunk.js","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\n\ntype Props = {\n  total: number[];\n  perPage: number;\n  currentPage: number;\n  onPageChange: React.Dispatch<React.SetStateAction<number>>;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalStart = perPage * currentPage - perPage;\n  const totalEnd = perPage * currentPage;\n\n  const totalResult = total.slice(totalStart, totalEnd);\n\n  const existingPages = total.slice(0, Math.ceil(42 / perPage));\n\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === existingPages.length;\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={classnames('page-item', {\n            disabled: isFirstPage,\n          })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={isFirstPage}\n            onClick={() => onPageChange(currentPage - 1)}\n          >\n            «\n          </a>\n        </li>\n        {existingPages.map((page) => (\n          <li\n            key={page}\n            className={classnames('page-item', {\n              active: currentPage === page,\n            })}\n            onClick={() => {\n              onPageChange(page);\n            }}\n            aria-hidden=\"true\"\n          >\n            <a data-cy=\"pageLink\" className=\"page-link\" href={`#${page}`}>\n              {page}\n            </a>\n          </li>\n        ))}\n        <li\n          className={classnames('page-item', {\n            disabled: isLastPage,\n          })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={isLastPage}\n            onClick={() => onPageChange(currentPage + 1)}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n      <ul>\n        {totalResult.map((all) => (\n          <li data-cy=\"item\" key={all}>\n            {`Item ${all}`}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Pagination } from './components/Pagination';\nimport { getNumbers } from './utils';\n\nconst items = getNumbers(1, 42).map((n) => n);\n\nexport const App: React.FC = () => {\n  const itemsPerPage = [3, 5, 10, 20];\n\n  const [currentPage, setCurrentPage] = useState(items[0]);\n  const [value, setValue] = useState<number>(itemsPerPage[1]);\n\n  const totalStart = value * currentPage - value;\n  const totalEnd = value * currentPage;\n\n  const totalResult = items.slice(totalStart, totalEnd);\n\n  useEffect(() => setCurrentPage(items[0]), [value]);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        Page\n        {' '}\n        {currentPage}\n        {` (items ${totalResult[0]} - ${\n          totalResult[totalResult.length - 1]\n        } of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            value={value}\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={(event) => {\n              setValue(+event.target.value);\n            }}\n          >\n            {itemsPerPage.map((it) => (\n              <option value={it} key={it}>\n                {it}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items}\n        perPage={value}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}